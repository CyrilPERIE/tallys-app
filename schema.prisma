datasource db {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model Identifiable {
  id           Int    @id @default(autoincrement())
  code         String @unique
  libelleCourt String
  libelleLong  String
}

model Timestamped {
  id             Int @id @default(autoincrement())
  timestamp      Int
  timezoneOffset Int
}

model CommentaireSource {
  id                          Int                           @id @default(autoincrement())
  texte                       String
  source                      String
  PronosticsDetaillesResponse PronosticsDetaillesResponse[]
}

model NomNumPMU {
  id     Int    @id @default(autoincrement())
  numPmu Int
  nom    String
  AVI    AVI?   @relation(fields: [aVIId], references: [id])
  aVIId  Int?
}

model TauxContribution {
  id             Int              @id @default(autoincrement())
  numerateur     Int
  denominateur   Int
  InfosJackpot   InfosJackpot[]
  InfosOptionMax InfosOptionMax[]
}

model Penetrometre {
  id            Int             @id @default(autoincrement())
  valeurMesure  String?
  heureMesure   String
  intitule      String
  commentaire   String
  CourseElement CourseElement[]
}

model Incident {
  id                 Int            @id @default(autoincrement())
  type               String
  numeroParticipants Int[]
  CourseElement      CourseElement? @relation(fields: [courseElementId], references: [id])
  courseElementId    Int?
}

model ReunionHippodrome {
  id           Int       @id @default(autoincrement())
  code         String
  libelleCourt String
  libelleLong  String
  Reunion      Reunion[]
}

model CourseHippodrome {
  id             Int             @id @default(autoincrement())
  code           String
  libelleCourt   String
  libelleLong    String
  codeHippodrome String
  CourseElement  CourseElement[]
}

model Meteo {
  id                     Int       @id @default(autoincrement())
  datePrevision          Int
  nebulositeCode         String
  nebulositeLibelleCourt String
  nebulositeLibelleLong  String
  temperature            Int
  forceVent              Int
  directionVent          String
  Reunion                Reunion[]
}

model PronosticsResponse {
  id             Int        @id @default(autoincrement())
  nom_prix       String
  id_nav_course  Int
  num_course_pmu Int
  nb_partants    Int
  source         String
  compressed     Boolean
  dateReunion    Int
  numeroReunion  Int
  numeroCourse   Int
  pronostics     PronoPmuFr @relation(fields: [pronoId], references: [id])
  pronoId        Int
}

model PronoPmuFr {
  id                          Int                  @id @default(autoincrement())
  chapeau                     Chapeau              @relation(fields: [chapeauId], references: [id])
  selection                   Selection[]
  presentationCourseTranslate String
  PronosticsResponse          PronosticsResponse[]
  chapeauId                   Int
}

model Chapeau {
  id         Int          @id @default(autoincrement())
  text       String
  translate  String
  PronoPmuFr PronoPmuFr[]
}

model Selection {
  id             Int         @id @default(autoincrement())
  cote_prob      String
  id_nav_partant Int
  rang           Int
  num_partant    Int
  PronoPmuFr     PronoPmuFr? @relation(fields: [pronoPmuFrId], references: [id])
  pronoPmuFrId   Int?
}

model PronosticsDetaillesResponse {
  id            Int               @id @default(autoincrement())
  commentaire   CommentaireSource @relation(fields: [commentaireId], references: [id])
  commentaireId Int
  quinte        Boolean
  syntheses     Synthesis[]
  avis          AVI[]
  cribles       Crible[]
}

model AVI {
  id                            Int                          @id @default(autoincrement())
  societe                       String
  journaliste                   String
  pronostics                    NomNumPMU[]
  PronosticsDetaillesResponse   PronosticsDetaillesResponse? @relation(fields: [pronosticsDetaillesResponseId], references: [id])
  pronosticsDetaillesResponseId Int?
}

model Crible {
  id                            Int                          @id @default(autoincrement())
  numPmu                        Int
  nom                           String
  commentaire                   String
  partant                       Boolean
  PronosticsDetaillesResponse   PronosticsDetaillesResponse? @relation(fields: [pronosticsDetaillesResponseId], references: [id])
  pronosticsDetaillesResponseId Int?
}

model Synthesis {
  id                            Int                          @id @default(autoincrement())
  intitule                      String
  classement                    SynthesisClassement[]
  PronosticsDetaillesResponse   PronosticsDetaillesResponse? @relation(fields: [pronosticsDetaillesResponseId], references: [id])
  pronosticsDetaillesResponseId Int?
}

model SynthesisClassement {
  id          Int        @id @default(autoincrement())
  numPmu      Int
  nom         String
  nbFoisCite  Int
  Synthesis   Synthesis? @relation(fields: [synthesisId], references: [id])
  synthesisId Int?
}

model RapportsDefinitifsResponse {
  id             Int       @id @default(autoincrement())
  typePari       String
  miseBase       Int
  rembourse      Boolean
  audience       String
  dividendeUnite String
  famillePari    String
  rapports       Rapport[]
}

model Rapport {
  id                           Int                         @id @default(autoincrement())
  libelle                      String
  dividende                    Float
  dividendePourUnEuro          Float
  combinaison                  Int[]
  nombreGagnants               Int
  dividendePourUneMiseDeBase   Float
  dividendeUnite               String
  RapportsDefinitifsResponse   RapportsDefinitifsResponse? @relation(fields: [rapportsDefinitifsResponseId], references: [id])
  rapportsDefinitifsResponseId Int?
}

model Programme {
  id                         Int       @id @default(autoincrement())
  cached                     Boolean
  date                       Int
  timezoneOffset             Int
  reunions                   Reunion[]
  prochainesCoursesAPartir   Json
  datesProgrammesDisponibles String[]
}

model Reunion {
  id                           Int               @id @default(autoincrement())
  cached                       Boolean
  timezoneOffset               Int
  dateReunion                  Int
  numOfficiel                  Int
  numOfficielReunionPrecedente Int?
  numOfficielReunionSuivante   Int
  numExterne                   Int
  nature                       String
  audience                     String
  statut                       String
  derniereReunion              Boolean
  offresInternet               Boolean
  regionHippique               String?
  meteoId                      Int
  meteo                        Meteo             @relation(fields: [meteoId], references: [id])
  hippodromeId                 Int
  hippodrome                   ReunionHippodrome @relation(fields: [hippodromeId], references: [id])
  cagnottes                    Cagnotte[]
  parisEvenement               ParisEvenement[]
  disciplinesMere              String[]
  specialites                  String[]
  courses                      CourseElement[]
  paysId                       Int
  pays                         Pays              @relation(fields: [paysId], references: [id])
  Programme                    Programme?        @relation(fields: [programmeId], references: [id])
  programmeId                  Int?

  @@unique([programmeId, numOfficiel])
}

model Pays {
  id      Int       @id @default(autoincrement())
  code    String
  libelle String
  Reunion Reunion[]
}

model CourseElement {
  id                                          Int              @id @default(autoincrement())
  departImminent                              Boolean
  arriveeDefinitive                           Boolean
  timezoneOffset                              Int
  numReunion                                  Int
  numExterneReunion                           Int
  numOrdre                                    Int
  numExterne                                  Int
  heureDepart                                 Int
  libelle                                     String
  libelleCourt                                String
  montantPrix                                 Int
  parcours                                    String
  distance                                    Int
  distanceUnit                                String
  discipline                                  String
  specialite                                  String
  categorieParticularite                      String
  conditionAge                                String?
  conditionSexe                               String
  nombreDeclaresPartants                      Int
  grandPrixNationalTrot                       Boolean
  numSocieteMere                              Int
  pariMultiCourses                            Boolean
  pariSpecial                                 Boolean
  montantTotalOffert                          Int
  montantOffert1er                            Int
  montantOffert2eme                           Int
  montantOffert3eme                           Int
  montantOffert4eme                           Int
  montantOffert5eme                           Int
  conditions                                  String
  numCourseDedoublee                          Int
  statut                                      String
  categorieStatut                             String
  dureeCourse                                 Int
  rapportsDefinitifsDisponibles               Boolean
  isArriveeDefinitive                         Boolean
  isDepartImminent                            Boolean
  isDepartAJPlusUn                            Boolean
  pronosticsExpires                           Boolean
  replayDisponible                            Boolean
  epcPourTousParis                            Boolean
  courseTrackee                               Boolean
  courseExclusiveInternet                     Boolean
  formuleChampLibreIndisponible               Boolean
  hasEParis                                   Boolean
  corde                                       String?
  numQuestion                                 Int[]
  indicateurEvenementArriveeProvisoire        String?
  detailsIndicateurEvenementArriveeProvisoire String?
  typePiste                                   String?
  incidents                                   Incident[]
  penetrometreId                              Int?
  penetrometre                                Penetrometre?    @relation(fields: [penetrometreId], references: [id])
  ordreArrivee                                Json
  hippodromeId                                Int
  hippodrome                                  CourseHippodrome @relation(fields: [hippodromeId], references: [id])
  paris                                       Paris[]
  cagnottes                                   Cagnotte[]
  Reunion                                     Reunion?         @relation(fields: [reunionId], references: [id])
  reunionId                                   Int?
}

model Paris {
  id                      Int             @id @default(autoincrement())
  poolId                  String?
  typePari                String
  miseBase                Int
  miseMax                 Int?
  enVente                 Boolean
  audience                String
  cagnotte                Int?
  reportable              Boolean
  codePari                String
  nbChevauxReglementaire  Int
  ordre                   Boolean
  combine                 Boolean
  spotAutorise            Boolean
  complement              Boolean
  misEnPaiement           Boolean?
  nouveauQuinte           Boolean?
  valeursFlexiAutorisees  Int[]
  valeursRisqueAutorisees Int[]
  infosJackpotId          Int?
  infosJackpot            InfosJackpot?   @relation(fields: [infosJackpotId], references: [id])
  infosOptionMaxId        Int?
  infosOptionMax          InfosOptionMax? @relation(fields: [infosOptionMaxId], references: [id])
  CourseElement           CourseElement?  @relation(fields: [courseElementId], references: [id])
  courseElementId         Int?
}

model InfosJackpot {
  id               Int              @id @default(autoincrement())
  miseBase         Int
  tauxContribution TauxContribution @relation(fields: [tauxId], references: [id])
  tauxId           Int
  Paris            Paris[]
}

model InfosOptionMax {
  id               Int              @id @default(autoincrement())
  miseBase         Int
  tauxContribution TauxContribution @relation(fields: [tauxId], references: [id])
  tauxId           Int
  tirage           Tirage[]
  Paris            Paris[]
}

model Tirage {
  id               Int             @id @default(autoincrement())
  coef             Int
  numeros          Int[]
  InfosOptionMax   InfosOptionMax? @relation(fields: [infosOptionMaxId], references: [id])
  infosOptionMaxId Int?
}

model Cagnotte {
  id               Int            @id @default(autoincrement())
  numCourse        Int
  typePari         String
  montant          Int
  cagnotteInternet Boolean
  typeCagnotte     String?
  Reunion          Reunion?       @relation(fields: [reunionId], references: [id])
  reunionId        Int?
  CourseElement    CourseElement? @relation(fields: [courseElementId], references: [id])
  courseElementId  Int?
}

model ParisEvenement {
  id            Int      @id @default(autoincrement())
  codePari      String
  dateProgramme Int
  numReunion    Int
  numOrdre      Int
  Reunion       Reunion? @relation(fields: [reunionId], references: [id])
  reunionId     Int?
}

model PoolID {
  id       Int    @id @default(autoincrement())
  codePari String
  poolId   String
}

model PhotosArrivee {
  id           Int     @id @default(autoincrement())
  heightSize   Int
  widthSize    Int
  url          String
  originalSize Boolean
}
